// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @unique @default(uuid())
  name         String
  username     String         @unique
  email        String         @unique
  password     String
  Post         Post[]
  Like         Like[]
  Comment      Comment[]
  RefreshToken RefreshToken[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
}

model RefreshToken {
  id        String   @unique @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Post {
  id        String    @unique @default(uuid())
  content   String    @db.VarChar(500)
  imageUrl  String?
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  Like      Like[]
  Comment   Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Like {
  id        String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @unique @default(uuid())
  content   String   @db.VarChar(400)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
